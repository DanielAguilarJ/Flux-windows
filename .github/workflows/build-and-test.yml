name: 🚀 Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  BUILD_CONFIGURATION: 'Release'

jobs:
  build-and-test:
    runs-on: windows-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🛠️ Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: 🔄 Restore dependencies
      run: dotnet restore ChronoGuard/ChronoGuard.sln

    - name: 🏗️ Build solution
      run: dotnet build ChronoGuard/ChronoGuard.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

    - name: 🧪 Run tests
      run: dotnet test ChronoGuard/ChronoGuard.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity normal --logger trx --collect:"XPlat Code Coverage"

    - name: 📊 Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          **/TestResults/*.trx
          **/TestResults/*/coverage.cobertura.xml

    - name: 📈 Code Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: '**/coverage.cobertura.xml'
        badge: true
        fail_below_min: false
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 80'

    - name: 📝 Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md

  security-scan:
    runs-on: windows-latest
    needs: build-and-test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🛠️ Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🔒 Run security scan
      run: |
        dotnet list ChronoGuard/ChronoGuard.sln package --vulnerable --include-transitive
        dotnet list ChronoGuard/ChronoGuard.sln package --deprecated

  build-artifacts:
    runs-on: windows-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🛠️ Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🔄 Restore dependencies
      run: dotnet restore ChronoGuard/ChronoGuard.sln

    - name: 🏗️ Build for Release
      run: dotnet build ChronoGuard/ChronoGuard.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

    - name: 📦 Publish Windows x64
      run: dotnet publish ChronoGuard/src/ChronoGuard.App/ChronoGuard.App.csproj -c ${{ env.BUILD_CONFIGURATION }} -r win-x64 --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -o ./publish/win-x64

    - name: 📦 Publish Windows x86
      run: dotnet publish ChronoGuard/src/ChronoGuard.App/ChronoGuard.App.csproj -c ${{ env.BUILD_CONFIGURATION }} -r win-x86 --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -o ./publish/win-x86

    - name: 🗜️ Create Portable ZIP (x64)
      run: |
        Compress-Archive -Path ./publish/win-x64/* -DestinationPath ./ChronoGuard-Portable-x64.zip

    - name: 🗜️ Create Portable ZIP (x86)
      run: |
        Compress-Archive -Path ./publish/win-x86/* -DestinationPath ./ChronoGuard-Portable-x86.zip

    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: chronoguard-builds
        path: |
          ./ChronoGuard-Portable-x64.zip
          ./ChronoGuard-Portable-x86.zip
        retention-days: 30

  lint-and-format:
    runs-on: windows-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🛠️ Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🎨 Install dotnet format
      run: dotnet tool install -g dotnet-format

    - name: 🔍 Check formatting
      run: dotnet format ChronoGuard/ChronoGuard.sln --verify-no-changes --verbosity diagnostic

    - name: 📝 Install markdownlint
      run: npm install -g markdownlint-cli

    - name: 📋 Lint Markdown files
      run: markdownlint "**/*.md" --ignore node_modules
