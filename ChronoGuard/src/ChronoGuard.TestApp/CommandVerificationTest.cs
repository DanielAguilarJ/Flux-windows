using System;
using System.Reflection;
using ChronoGuard.App.ViewModels;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using ChronoGuard.Domain.Interfaces;
using Moq;

namespace ChronoGuard.TestApp
{
    /// <summary>
    /// Simple test to verify that MVVM commands are properly generated by CommunityToolkit.Mvvm
    /// </summary>
    public class CommandVerificationTest
    {
        public static void VerifyCommandGeneration()
        {
            Console.WriteLine("=== ChronoGuard Command Verification Test ===");
            Console.WriteLine();

            try
            {
                // Create mock services for the ViewModel
                var mockLogger = new Mock<ILogger<MainWindowViewModel>>();
                var mockLocationService = new Mock<ILocationService>();
                var mockProfileService = new Mock<IProfileService>();
                var mockConfigService = new Mock<IConfigurationService>();
                var mockBackgroundService = new Mock<ChronoGuard.Application.Services.ChronoGuardBackgroundService>();
                var mockSolarService = new Mock<ISolarCalculatorService>();
                var mockColorService = new Mock<IColorTemperatureService>();

                // Create the ViewModel instance
                var viewModel = new MainWindowViewModel(
                    mockLogger.Object,
                    mockLocationService.Object,
                    mockProfileService.Object,
                    mockConfigService.Object,
                    mockBackgroundService.Object,
                    mockSolarService.Object,
                    mockColorService.Object
                );

                Console.WriteLine("‚úì MainWindowViewModel instance created successfully");

                // Verify that the source-generated command properties exist
                var commands = new string[]
                {
                    "PauseCommand",
                    "ResumeCommand", 
                    "ToggleCommand",
                    "OpenSettingsCommand",
                    "ShowAboutCommand",
                    "SetTemperatureCommand",
                    "ApplyManualTemperatureCommand",
                    "UpdateLocationCommand",
                    "MinimizeToTrayCommand",
                    "ExitApplicationCommand",
                    "ShowTutorialCommand",
                    "ToggleRealTimeAdjustmentCommand"
                };

                Type viewModelType = viewModel.GetType();
                int successCount = 0;
                int totalCount = commands.Length;

                foreach (string commandName in commands)
                {
                    PropertyInfo? property = viewModelType.GetProperty(commandName);
                    if (property != null)
                    {
                        var command = property.GetValue(viewModel);
                        if (command != null)
                        {
                            Console.WriteLine($"‚úì {commandName} - Found and instantiated");
                            successCount++;
                        }
                        else
                        {
                            Console.WriteLine($"‚úó {commandName} - Property exists but value is null");
                        }
                    }
                    else
                    {
                        Console.WriteLine($"‚úó {commandName} - Property not found");
                    }
                }

                Console.WriteLine();
                Console.WriteLine($"Command Verification Results: {successCount}/{totalCount} commands found");
                
                if (successCount == totalCount)
                {
                    Console.WriteLine("üéâ SUCCESS: All commands are properly generated by CommunityToolkit.Mvvm!");
                    Console.WriteLine("   The button click issues should now be resolved.");
                }
                else
                {
                    Console.WriteLine("‚ö†Ô∏è  WARNING: Some commands are missing. This may cause button click issues.");
                }

                Console.WriteLine();
                Console.WriteLine("=== Test Complete ===");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå ERROR: {ex.Message}");
                Console.WriteLine($"Stack Trace: {ex.StackTrace}");
            }
        }
    }
}
